<component>

  Not stored in the tree but kept in memory. Loaded components can probably be
  kept as their own document and need not be imported in the context? -- well
  right now we import them since we have to wrap the whole thing anyway. Maybe
  as an optimization later.

  [ ] Keep track of their URI for relative URIs
  [ ] Default paths for component loading

  @id (?) -- can be referred to by href

  <view> (?) -- rendering of that component
  <property> (*) -- component properties

  ._create_instance(): return a fresh <instance> element for this component.

  ._view: pointer to the <view> child of the component; deleted if the view is
  removed; unchanged 

  [ ] update instances when view changes

  ._properties: array of property child nodes of the component.


<context>

  Virtual view for a runtime context.

  <instance> (*) -- instances rendered to the target of the context (in most
  case, the context will have an application instance as its only child.)

  bender.create_context(target) creates a new context document for the given
  target (default is window.document.documentElement.) New instances can be
  added to the document element of the context for rendering in the target.


<instance>

  Component instance. Instances added to the tree get rendered and are active
  (they respond to events and property changes.)

  Instances have a pointer to the component's view, properties and watches. They
  can be customized by setting their own.

  @href (*) URI of the component to instantiate; will automatically load the
  component if necessary

  ._roots: array of DOM nodes that have been rendered for the instance view
