<component xmlns="http://bender.igel.co.jp" xmlns:f="http://bender.igel.co.jp/f"
  xmlns:b="http://bender.igel.co.jp/b" xmlns:html="http://www.w3.org/1999/xhtml"
  b:on="false" f:rate-ms="1000" id="timer">

  <title>Timer</title>

  <script>

    var timeout = null;

    // The timer has a running read-only property
    prototype.init = function()
    {
      flexo.getter_setter(this, "running", function() { return !!timeout; });
    };

    // Start the timer; it will emit a @tick event at the interval given by
    // rate-ms (in ms.) Restart if it was running.
    prototype.start = function()
    {
      if (timeout) clearTimeout(timeout);
      var self = this;
      var tick = function() {
        flexo.notify(self, "@tick");
        timeout = setTimeout(tick, self.$rateMs);
      };
      timeout = setTimeout(tick, self.$rateMs);
    };

    // Stop the timer. Noop if it was not running.
    prototype.stop = function()
    {
      if (timeout) {
        clearTimeout(timeout);
        timeout = null;
      }
    };

  </script>

  <watch>
    <get property="rate-ms">
      var v = parseFloat(value);
      if (v > 0) {
        this.stop();
        this.start();
      } else {
        this.$rateMs = previous_value;
      }
    </get>
  </watch>

  <watch>
    <get property="on">
      if (!!value) this.start(); else this.stop();
    </get>
  </watch>

</component>
