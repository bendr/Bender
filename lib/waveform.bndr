<component xmlns="http://bender.igel.co.jp" xmlns:f="http://bender.igel.co.jp/f"
  xmlns:html="http://www.w3.org/1999/xhtml" id="waveform"
  f:scale="400" f:height="400">

  <title>Waveform display and playback</title>

  <view>
    <html:canvas id="canvas"/>
    <html:audio id="audio"/>
  </view>

  <watch>
    <get property="height"/>
    <set view="canvas" attr="height"/>
  </watch>

  <watch>
    <get property="uri">
      flexo.log("Got new URI", value);
      return value;
    </get>
    <set value="uri">
      flexo.log("Set URI to", uri);
      if (uri) this.xhr(uri, { responseType: "arraybuffer" });
    </set>
    <set view="canvas" attr="width" return="0"/>
  </watch>

  <watch>
    <get event="@xhr-success" value="req">
      this.draw_waveform(req.response);
      //this.views.audio.src = req._uri;
    </get>
  </watch>

  <watch>
    <get event="@xhr-error" value="req">
      alert("Could not load audio file at {0}: {1}"
        .fmt(req._uri, req.response));
    </get>
  </watch>

  <script><![CDATA[

    prototype.draw_waveform = function(arraybuffer)
    {
      flexo.log("Drawing...");
      var ac = new webkitAudioContext;
      var gc = this.views.canvas.getContext("2d");
      var buffer = ac.createBuffer(arraybuffer, true)
      var width = buffer.duration * this.$scale;
      var height = this.$height / 2;
      var size = Math.ceil(buffer.length / width);  // window size
      this.views.canvas.width = width;
      for (var x = 0, j = 0; x < width; ++x) {
        var min = 1;
        var max = -1;
        var p = 0;
        for (var i = 0; i < size; ++i) {
          var val = buffer.getChannelData(0)[j++];
          p += val * val;
          if (val < min) min = val;
          if (val > max) max = val;
          // TODO RMS in addition to peak amplitude
        }
        gc.fillStyle = "#444";
        gc.fillRect(x, height * (1 - max), 1, height * (max - min));
        var rms = p / size;
        gc.fillStyle = "#08f";
        gc.fillRect(x, height * (1 - rms), 1, height * 2 * rms);
      }
      flexo.log("...OK");
    }

    /*
    flexo.log("Drawing...");
    this.buffer = this.context.createBuffer(this.arraybuffer, true);
    var canvas = document.createElement("canvas");
    var gc = canvas.getContext("2d");
    this.width = this.buffer.duration * this.fps * this.scale;
    canvas.width = this.width;
    canvas.height = this.height;
    var h = canvas.height / 2;
    gc.fillStyle = "#444";
    this.sz = Math.ceil(this.buffer.length / canvas.width);
    for (var x = 0, j = 0; x < canvas.width; ++x) {
      var min = 1;
      var max = -1;
      for (var i = 0; i < this.sz; ++i) {
        var val = this.buffer.getChannelData(0)[j++];
        if (val < min) min = val;
        if (val > max) max = val;
      }
      gc.fillRect(x, h * (1 - max), 1, h * (max - min));
    }
    div.innerHTML = "";
    div.style.width = "{0}px".fmt(this.width);
    div.style.height = "{0}px".fmt(this.height);
    var img = document.createElement("img");
    img.alt = "Waveform for {0}".fmt(this.uri);
    img.src = canvas.toDataURL();
    div.appendChild(img);
    var svg = flexo.svg("svg",
        { viewBox: "0 0 {0} {1}".fmt(this.width, this.height) });
    svg.style.width = "{0}px".fmt(this.width);
    svg.style.height = "{0}px".fmt(this.height);
    div.appendChild(svg);
    this.cursor = flexo.svg("line", { stroke: "#ff4040",
      y1: 0, y2: this.height });
    svg.appendChild(this.cursor);
    this.sample_rate = this.buffer.sampleRate;
    this.context = null;
    this.buffer = null;
    delete this.context;
    delete this.buffer;
    Wave.cursor.setAttribute("x1", 100);
    Wave.cursor.setAttribute("x2", 100);
    requestAnimationFrame(this.animate_cursor);
    flexo.log("... drawn.");
    return div;
    */

  ]]></script>

</component>
