<component xmlns="http://bender.igel.co.jp"
  xmlns:b="http://bender.igel.co.jp/b"
  xmlns:html="http://www.w3.org/1999/xhtml">
  <title>Bender tree visualizer</title>

  <view>
    <target q="head" once="true">
      <html:style>
        .bender_tree {
          border-bottom: dashed thin black;
          border-top: dashed thin black;
          padding-bottom: 8px;
          background-color: white;
          margin-top: 0;
          padding-top: 8px;
        }
        .bender_tree, .bender_tree ul {
          list-style-type: none;
          padding-left: 16px; }
        .bender_tree span.tag { font-weight: bold; }
        .bender_tree .html { color: #f80; }
        .bender_tree .svg { color: #f08; }
        .bender_tree .xlink { color: #f88; }
        .bender_tree .foreign { color: #f00; }
        .bender_tree .bender { color: #08f; }
        .bender_tree span.attr { font-style: italic; }
        .bender_tree span.attr-value { font-family: monospace; }
        .bender_tree li.text {
          font-family: monospace;
          white-space: pre;
        }
        .bender_tree .disclosure { cursor: default; }
        .bender_tree .__collapsed { display: none; }
      </html:style>
    </target>
    <html:ul id="ul" class="bender_tree"/>
  </view>

  <script><![CDATA[

    this._prototype.make_tree = function(instance)
    {
      var ul = this.component.querySelector("ul");
      /*flexo.listen(instance.use.ownerDocument, "@refresh", (function(e) {
          var component = e.instance.component;
          var use = component.__use;
          if (use) {
            var parent = use.parentNode;
            var ref = use.nextSibling;
            parent.removeChild(use);
            parent.insertBefore(this.use_for_node(component), ref);
          }
          }).bind(this));*/
      ul.appendChild(this.use_for_node(instance.use));
      ul.appendChild(this.use_for_node(instance.component));
    };

    this._prototype.use_for_node = function(node)
    {
      if (node.nodeType === 1) {
        // New element
        var use = this.component.$("use", { ref: "elem",
          "e:tag": node.localName, "e:ns": node.namespaceURI });
        // Attributes (skip namespace declarations)
        [].forEach.call(node.attributes, function(attr) {
            if (!/^xmlns:?/.test(attr.name)) {
              use.appendChild(this.component.$("use", { ref: "attr",
                "e:ns": attr.namespaceURI, "e:name": attr.name,
                "e:value": attr.value }));
            }
          }, this);
        // Child nodes (text and elements)
        var ul = use.appendChild(this.component.$("html:ul"));
        [].forEach.call(node.childNodes, function(ch) {
            var li = this.use_for_node(ch);
            if (li) ul.appendChild(li);
          }, this);
        if (ul.childNodes.length === 0) use.removeChild(ul);
        node.__use = use;
        return use;
      } else if ((node.nodeType === 3 || node.nodeType === 4) &&
        /\S/.test(node.textContent)) {
        // Non-whitespace text node
        // TODO keep whitespace when necessary
        return this.component.$("use", { ref: "text" }, node.textContent);
      }
    };

  ]]></script>

  <component id="elem" b:expanded="true">
    <view>
      <html:li id="li">
        <html:span id="disclosure" class="disclosure"/><html:span id="tag"
          class="tag"/>
        <content/>
      </html:li>
    </view>
    <watch>
      <get property="tag"/>
      <set view="tag"/>
    </watch>
    <watch>
      <get property="ns">
        if (value === flexo.XHTML_NS) {
          flexo.add_class(this.views.tag, "html");
        } else if (value === flexo.SVG_NS) {
          flexo.add_class(this.views.tag, "svg");
        } else if (value !== bender.NS) {
          flexo.add_class(this.views.tag, "foreign");
        }
      </get>
    </watch>
    <watch>
      <get property="expanded">
        var ul = this.views.li.querySelector("ul");
        if (ul) {
          flexo.set_class_iff(ul, "__collapsed", !value);
          return value;
        }
      </get>
      <set view="disclosure">
        return value === true ? "▾ " : value === false ? "▸ " : "";
      </set>
    </watch>
    <watch>
      <get view="disclosure" event="click"/>
      <set property="expanded">return !this.properties.expanded;</set>
    </watch>
  </component>

  <component id="attr">
    <view>
      <html:span class="attr">
        <html:span class="attr-name" id="name"/>=<html:span class="attr-value"
          id="value"/>
      </html:span>
    </view>
    <watch>
      <get property="ns">
        if (value === flexo.XHTML_NS) {
          flexo.add_class(this.views.name, "html");
        } else if (value === flexo.SVG_NS) {
          flexo.add_class(this.views.name, "svg");
        } else if (value === flexo.XLINK_NS) {
          flexo.add_class(this.views.name, "xlink");
        } else if (value === bender.NS_B || value === bender.NS_E ||
          value === bender.NS_F || value === bender.NS_J) {
          flexo.add_class(this.views.name, "bender");
        } else if (value) {
          flexo.add_class(this.views.name, "foreign");
        }
      </get>
    </watch>
    <watch>
      <get property="name"/>
      <set view="name"/>
    </watch>
    <watch>
      <get property="value"/>
      <set view="value"/>
    </watch>
  </component>

  <component id="text">
    <view>
      <html:li class="text"><content/></html:li>
    </view>
  </component>

</component>
