<component xmlns="http://bender.igel.co.jp" xmlns:b="http://bender.igel.co.jp/b"
  xmlns:p="http://bender.igel.co.jp/p"
  xmlns:html="http://www.w3.org/1999/xhtml">
  <title>Bender tree visualizer</title>

  <view>
    <target q="head" once="true">
      <html:style>
        .bender_tree {
          background-color: white;
          border-bottom: dashed thin black;
          margin-top: 0;
          padding-bottom: 8px;
          padding-top: 8px;
        }
        .bender_tree {
          background-color: white;
          border-bottom: dashed thin black;
          margin-top: 0;
          padding-bottom: 8px;
          padding-top: 8px;
        }
        .bender_tree, .bender_tree ul {
          list-style-type: none;
          padding-left: 16px;
        }
        .bender_tree div.elem { display: inline-block; }
        .bender_tree div.actions { display: none; }
        .bender_tree div.actions span {
          margin-left: 1em;
          padding: 2px 4px;
          background-color: #ddd;
          border-radius: 4px;
          cursor: default;
        }
        .bender_tree span.delete {
          background-color: #ff4040 !important;
          color: white;
        }
        .bender_tree span.tag {
          cursor: default;
          font-weight: bold;
        }
        .bender_tree .html { color: #f80; }
        .bender_tree .svg { color: #f08; }
        .bender_tree .xlink { color: #f88; }
        .bender_tree .foreign { color: #f00; }
        .bender_tree .bender { color: #08f; }
        .bender_tree span.attr { margin-left: 1em; }
        .bender_tree span.attr-name {
          font-style: italic;
          cursor: default;
        }
        .bender_tree span.attr-value {
          font-family: Menlo, Consolas, monospace;
          cursor: default;
        }
        .bender_tree li.text div.text {
          font-family: Menlo, Consolas, monospace;
          font-size: smaller;
          white-space: pre;
          cursor: default;
        }
        .bender_tree li.text textarea { display: none; }
        .bender_tree .disclosure { cursor: default; }
        .bender_tree .__collapsed { display: none; }
        .bender_tree .__selected { background-color: #ff0; }
        .bender_tree .__selected span.tag { display: none; }
        .bender_tree .__selected span.tag.fixed { display: inline-block; }
        .bender_tree .__selected div.actions { display: inline-block; }
        .bender_tree li.text.__selected div.text { display: none; }
        .bender_tree li.text.__selected textarea { display: inline-block; }

        div.attr-name, div.attr-value { display: inline-block; }

        .bender_tree div.tag-name { display: inline-block; }
        .bender_tree .tag-name span,
        .bender_tree .attr-name span,
        .bender_tree .attr-value span { cursor: default; }
        .bender_tree .tag-name input,
        .bender_tree .attr-name input,
        .bender_tree .attr-value input { display: none; }
        .bender_tree .__editable input { display: inline; }
        .bender_tree .__editable span { display: none; }
      </html:style>
    </target>
    <html:ul id="ul" class="bender_tree">
      <content/>
    </html:ul>
  </view>

  <component id="elem" b:expanded="true">
    <view>
      <html:li id="li">
        <html:span id="disclosure" class="disclosure"/>
        <use ref="text-span" id="tag" p:text="name" class="tag-name"/>
        <content/>
      </html:li>
    </view>
    <script><![CDATA[

      this._prototype.instantiated = function()
      {
        var app_node;
        flexo.getter_setter(this, "app_node", function() { return app_node; },
          function(n) {
            app_node = n;
            flexo.listen(n, "@refresh", (function(e) {
                console.log("~~~ refresh ~~~");
                this.refresh_node();
              }).bind(this));
            this.refresh_node();
          });
      };

      this._prototype.refresh_node = function()
      {
        this.properties.ns = this.app_node.namespaceURI;
        this.properties.name = this.app_node.localName;
        flexo.remove_children(this.use);
        // Attributes
        [].forEach.call(this.app_node.attributes, function(attr) {
            if (!/^xmlns:?/.test(attr.name)) {
              this.use.appendChild(this.use.$("use",
                { href: "tree.xml#attr", "bender_e:ns": attr.namespaceURI,
                  "bender_e:name": attr.name, "bender_e:value": attr.value }));
            }
          }, this);
        // Child nodes (text and elements)
        var ul = this.use.$("html:ul");
        [].forEach.call(this.app_node.childNodes, function(ch) {
            var li;
            if (ch.nodeType === 1) {
              li = this.use.$("use", { href: "tree.xml#elem" });
            } else if (ch.nodeType === 3 || ch.nodeType === 4 &&
              /\S/.test(ch.textContent)) {
              // Non-whitespace text node
              // TODO keep whitespace when necessary
              li = this.use.$("use", { href: "tree.xml#text" },
                ch.textContent);
            }
            if (li) {
              flexo.listen(li, "@instance", function(e) {
                  e.instance.app_node = ch;
                });
              ul.appendChild(li);
            }
          }, this);
        if (ul.childNodes.length > 0) {
          this.use.appendChild(ul);
          this.children = ul;
        }
      };

    ]]></script>
    <watch>
      <get property="expanded">
        var ul = this.views.li.querySelector("ul");
        if (ul) {
          flexo.set_class_iff(ul, "__collapsed", !value);
          return value;
        }
      </get>
      <set view="disclosure">
        return value === true ? "▾ " : value === false ? "▸ " : "";
      </set>
    </watch>
    <watch>
      <get view="disclosure" event="click"/>
      <set property="expanded">return !this.properties.expanded;</set>
    </watch>
  </component>

  <component id="text-span" b:editable="false">
    <view>
      <html:div id="div" class="text-span">
        <html:span id="span"/>
        <html:input type="text" id="input"/>
      </html:div>
    </view>
    <watch>
      <get use="$parent" property="{text}"/>
      <set view="span"/>
      <set view="input" property="value"/>
    </watch>
    <watch>
      <get use="$parent" property="ns">
        if (value === flexo.XHTML_NS) {
          this.view.span.classList.add("html");
        } else if (value === flexo.SVG_NS) {
          this.view.span.classList.add("svg");
        } else if (value === flexo.XLINK_NS) {
          this.view.span.classList.add("xlink");
        } else if (value === bender.NS || value === bender.NS_B ||
          value === bender.NS_E || value === bender.NS_F ||
          value === bender.NS_J) {
          this.view.span.classList.add("bender");
        } else if (value) {
          this.view.span.classList.add("foreign");
        }
      </get>
    </watch>
    <watch>
      <get use="$self" property="editable">
        flexo.set_class_iff(this.views.div, "__editable", value);
      </get>
    </watch>
    <watch>
      <get view="span" event="click"/>
      <set use="$self" property="editable">return true;</set>
    </watch>
    <watch>
      <get view="input" event="change"/>
      <set use="$parent" property="{text}">return value.target.value;</set>
      <set use="$self" property="editable">return false;</set>
    </watch>
    <watch>
      <get view="input" event="blur"/>
      <set use="$self" property="editable">return false;</set>
    </watch>
  </component>

  <component id="attr">
    <view>
      <html:span class="attr">
        <use ref="text-span" id="name" class="attr-name" p:text="name"/> =
        <use ref="text-span" id="value" class="attr-value" p:text="value"/>
      </html:span>
    </view>
  </component>

  <component id="text" b:editable="false">
    <view>
      <html:li class="text">
        <html:div id="text" class="text"><content/></html:div>
        <html:textarea id="input"/>
      </html:li>
    </view>
    <!--
    <watch>
      <get view="text" event="click"/>
      <set view="input" property="value">
        return this.views.text.textContent
      </set>
      <set property="editable">return true;</set>
    </watch>
    -->
    <watch>
      <get view="input" event="blur"/>
      <set property="editable">return false;</set>
    </watch>
    <watch>
      <get view="input" event="change"/>
      <set view="text">
        this.use.__node.parentNode._textContent(this.views.input.value);
        return this.views.input.value
      </set>
    </watch>
    <watch>
      <get property="editable">
        flexo.set_class_iff(this.views.text, "__collapsed", value);
        flexo.set_class_iff(this.views.input, "__collapsed", !value);
        if (value) this.views.input.focus();
      </get>
    </watch>
  </component>

</component>
