<component xmlns="http://bender.igel.co.jp"
  xmlns:b="http://bender.igel.co.jp/b"
  xmlns:html="http://www.w3.org/1999/xhtml">
  <title>Bender tree visualizer</title>

  <view>
    <target q="head" once="true">
      <html:style>
        .bender_tree {
          background-color: white;
          border-bottom: dashed thin black;
          margin-top: 0;
          padding-bottom: 8px;
          padding-top: 8px;
        }
        .bender_tree, .bender_tree ul {
          list-style-type: none;
          padding-left: 16px;
        }
        .bender_tree span.tag { font-weight: bold; }
        .bender_tree .html { color: #f80; }
        .bender_tree .svg { color: #f08; }
        .bender_tree .xlink { color: #f88; }
        .bender_tree .foreign { color: #f00; }
        .bender_tree .bender { color: #08f; }
        .bender_tree span.attr { font-style: italic; }
        .bender_tree span.attr-value { font-family: monospace; }
        .bender_tree li.text div {
          font-family: monospace;
          white-space: pre;
        }
        .bender_tree .disclosure { cursor: default; }
        .bender_tree .__collapsed { display: none; }
      </html:style>
    </target>
    <html:ul id="ul" class="bender_tree">
      <content/>
    </html:ul>
  </view>

  <component id="elem" b:expanded="true">
    <view>
      <html:li id="li">
        <html:span id="disclosure" class="disclosure"/><html:span id="tag"
          class="tag"/>
        <content/>
      </html:li>
    </view>
    <script>
      this._prototype.instantiated = function()
      {
        var app_node;
        flexo.getter_setter(this, "app_node", function() { return app_node; },
          function(n) {
            app_node = n;
            this.properties.ns = app_node.namespaceURI;
            this.properties.tag = app_node.localName;
          });
      };
    </script>
    <watch>
      <get property="tag"/>
      <set view="tag"/>
    </watch>
    <watch>
      <get property="ns">
        if (value === flexo.XHTML_NS) {
          flexo.add_class(this.views.tag, "html");
        } else if (value === flexo.SVG_NS) {
          flexo.add_class(this.views.tag, "svg");
        } else if (value !== bender.NS) {
          flexo.add_class(this.views.tag, "foreign");
        }
      </get>
    </watch>
    <watch>
      <get property="expanded">
        var ul = this.views.li.querySelector("ul");
        if (ul) {
          flexo.set_class_iff(ul, "__collapsed", !value);
          return value;
        }
      </get>
      <set view="disclosure">
        return value === true ? "▾ " : value === false ? "▸ " : "";
      </set>
    </watch>
    <watch>
      <get view="disclosure" event="click"/>
      <set property="expanded">return !this.properties.expanded;</set>
    </watch>
  </component>

  <component id="attr">
    <view>
      <html:span class="attr">
        <html:span class="attr-name" id="name"/>=<html:span class="attr-value"
          id="value"/>
      </html:span>
    </view>
    <watch>
      <get property="ns">
        if (value === flexo.XHTML_NS) {
          flexo.add_class(this.views.name, "html");
        } else if (value === flexo.SVG_NS) {
          flexo.add_class(this.views.name, "svg");
        } else if (value === flexo.XLINK_NS) {
          flexo.add_class(this.views.name, "xlink");
        } else if (value === bender.NS_B || value === bender.NS_E ||
          value === bender.NS_F || value === bender.NS_J) {
          flexo.add_class(this.views.name, "bender");
        } else if (value) {
          flexo.add_class(this.views.name, "foreign");
        }
      </get>
    </watch>
    <watch>
      <get property="name"/>
      <set view="name"/>
    </watch>
    <watch>
      <get property="value"/>
      <set view="value"/>
    </watch>
  </component>

  <component id="text" b:editable="false">
    <view>
      <html:li class="text">
        <html:div id="text"><content/></html:div>
        <html:textarea id="input"/>
      </html:li>
    </view>
    <watch>
      <get view="text" event="click"/>
      <set view="input" property="value">
        return this.views.text.textContent
      </set>
      <set property="editable">return true;</set>
    </watch>
    <watch>
      <get view="input" event="blur"/>
      <set property="editable">return false;</set>
    </watch>
    <watch>
      <get view="input" event="change"/>
      <set view="text">
        this.use.__node.parentNode._textContent(this.views.input.value);
        return this.views.input.value
      </set>
    </watch>
    <watch>
      <get property="editable">
        flexo.set_class_iff(this.views.text, "__collapsed", value);
        flexo.set_class_iff(this.views.input, "__collapsed", !value);
        if (value) this.views.input.focus();
      </get>
    </watch>
  </component>

</component>
