<app xmlns="http://bender.igel.co.jp" xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:e="http://bender.igel.co.jp/e" xmlns:f="http://bender.igel.co.jp/f">
  <title>A complex timer test</title>

  <stylesheet>
.pop { padding: 4px; border: solid 2px black;
  background-color: transparent !important; font-weight: bold;
  -webkit-border-radius: 8px; -moz-border-radius: 8px; cursor: default;
  display: inline-block; margin: 0 8px 4px 0;
  -moz-box-shadow: 4px 4px 0px black; -webkit-box-shadow: 4px 4px 0px black; }
.pop.__down { opacity: 1 !important; -moz-box-shadow: 0 0 0;
  -webkit-box-shadow: 0 0 0; -moz-transform: translate(4px, 4px);
  -webkit-transform: translate(4px, 4px); }
.pop.__disabled { opacity: 0.5; }
#time { font-size: 1000%; }
  </stylesheet>

  <!-- Keep track of the running state of the metro -->
  <bind value="running">
    <view ref="led" property="on"/>
    <view ref="stop-button">
      <get event="@pushed">
        if (this.paused) {
          // was paused or stop, so really stop
          this.paused = false;
        } else {
          this.paused = true;
        }
      </get>
      <set/>
    </view>
    <view ref="resume-button" event="@pushed">
      <get></get>
      <set></set>
    </view>
    <view ref="restart-button" event="@pushed">
      <get></get>
      <set></set>
    </view>
  </bind>

  <controller id="metro" instance-of="bender.metro" f:rate-ms="75"/>

  <controller>
    <script><![CDATA[
      $_.start = function()
      {
        this.start_time = (new Date).valueOf();
        this.outlets.led.status = "on";
        this.outlets.metro.bang();
        this.outlets.resume_button.controllers[""].enable(false);
      };
    ]]></script>

    <listen event="@ready" handler="start"/>

    <listen source="stop-button" event="@pushed">
      if (this.outlets.led.status === "on") {
        this.outlets.led.status = "off";
        this.outlets.metro.stop();
        this.__stop_time = (new Date).valueOf();
        this.outlets.resume_button.controllers[""].enable(true);
      } else {
        delete this.__stop_time;
        this.current_time = 0;
        this.update_time();
        this.outlets.resume_button.controllers[""].enable(false);
      }
    </listen>

    <listen source="resume-button" event="@pushed"><![CDATA[
      if (this.outlets.led.status === "off" && this.__stop_time) {
        this.start_time += (new Date).valueOf() - this.__stop_time;
        delete this.__stop_time;
        this.outlets.resume_button.controllers[""].enable(false);
        this.outlets.led.status = "on";
        this.outlets.metro.bang();
      }
    ]]></listen>
    <listen source="restart-button" event="@pushed">
      this.outlets.metro.stop();
      this.start();
    </listen>
    <listen source="ms-check" event="@checked" handler="update_time"/>
    <listen source="int-box" event="@change">
      this.outlets.metro["rate-ms"] = event.value;
    </listen>
  </controller>

  <!-- Show ms flag -->
  <bind value="show_ms">
    <view ref="ms-check" property="checked" event="@checked"/>
  </bind>

  <!-- On metro events: update current_time, LED is on, show the current
  time -->
  <bind value="current_time">
    <controller ref="metro" event="@bang">
      <get>
        return (new Date).valueOf() - this.start_time;
      </get>
    </controller>
    <view ref="led" property="status">
      <set>return "on";</set>
    </view>
    <view ref="time">
      <set><![CDATA[
        var s = Math.floor(value / 1000) % 60;
        var m = Math.floor(value / 60000) % 60;
        var h = Math.floor(value / 3600000);
        var ms = value % 1000;
        return (this.show_ms ?
          "{0}{1}:{2}{3}:{4}{5}.{6}{7}{8}" : "{0}{1}:{2}{3}:{4}{5}")
          .fmt(h < 10 ? "0" : "", h,
            m < 10 ? "0" : "", m,
            s < 10 ? "0" : "", s,
            ms < 10 ? "0" : "", ms < 100 ? "0" : "", ms % 1000);
      ]]></set>
    </view>
  </bind>

  <view>
    <html:p>
      <component href="../../lib/led.xml#led" id="led"/>
      <html:span id="time"/>
    </html:p>
    <html:p>
      <component href="../../lib/button.xml#button" id="stop-button"
        e:class="pop">Stop</component>
      <component href="../../lib/button.xml#button" id="resume-button"
        e:class="pop">Resume</component>
      <component href="../../lib/button.xml#button" id="restart-button"
        e:class="pop">Restart</component>
      <component href="../../lib/check.xml#check" id="ms-check">
        Show milliseconds</component> • Timer interval:
      <component href="../../lib/integer.xml#integer" id="int-box" f:min="20"
        f:scale="5"/> ms
    </html:p>
    <html:p>The timer will start automatically. Press
      <html:strong>Stop</html:strong> once to stop the timer; it can be resumed
      by pressing the <html:strong>Resume</html:strong> button. Press
      <strong>Stop</strong> twice to clear the timer (the time will revert to
      0.) Finally, the timer can be restarted from 0 at anytime with the
      <strong>Restart</strong> button. The LED indicator shows up green when
      the timer is running, and is grayed out otherwise. You can decide to
      display milliseconds or not by (un)checking the <em>Show
        milliseconds</em> checkbox. You can change the timer interval by
      clicking inside the number box and draggin up or down, or typing a value
      after having clicked in the timer box and typing enter or return (it
      should show a focus ring.) Note: since we rely on Javascript for timing,
      the timer interval is not very acurate.</html:p>
  </view>
</app>
