<app xmlns="http://bender.igel.co.jp" xmlns:b="http://bender.igel.co.jp/b"
  xmlns:f="http://bender.igel.co.jp/f" xmlns:svg="http://www.w3.org/2000/svg"
  f:w="1600" f:h="1000" f:hw="" f:hh="" f:asteroids="8" b:running="true"
  f:stars_density="0.0005" f:star_r="3">

  <title>Asteroids</title>

  <view>
    <svg:svg id="svg">
      <svg:rect fill="black" id="bg"/>
      <svg:g id="stars"/>
      <svg:g id="asteroids"/>
      <use ref="ship" id="ship"/>
    </svg:svg>
  </view>

  <watch>
    <get property="w"/>
    <set property="hw">
      return value / 2;
    </set>
    <set view="bg" attr="width"/>
    <set view="bg" attr="x">
      return -this.properties.hw;
    </set>
  </watch>

  <watch>
    <get property="h"/>
    <set property="hh">
      return value / 2;
    </set>
    <set view="bg" attr="height"/>
    <set view="bg" attr="y">
      return -this.properties.hh;
    </set>
  </watch>

  <watch>
    <get property="hw"/>
    <get property="hh"/>
    <set view="svg" attr="viewBox">
      return "-{hw} -{hh} {w} {h}".format(this.properties);
    </set>
    <set><![CDATA[
      // Add stars
      var g = this.component.querySelector("#stars");
      flexo.remove_children(g);
      for (var i = 0; i < this.properties.stars_density * this.properties.w *
        this.properties.h; ++i) {
        g.appendChild(g.$("svg:circle", {
          r: Math.random() * this.properties.star_r,
          cx: Math.random() * this.properties.w - this.properties.hw,
          cy: Math.random() * this.properties.w - this.properties.hw,
          fill: "white", "fill-opacity": Math.random() }));
      }
      // Add asteroids
      g = this.component.querySelector("#asteroids");
      flexo.remove_children(g);
      for (i = 0; i < this.properties.asteroids; ++i) {
        g.appendChild(g.$("use", { ref: "asteroid",
          "bender_f:x":
            flexo.random_int(-this.properties.hw, this.properties.hw),
          "bender_f:y":
            flexo.random_int(-this.properties.hh, this.properties.hh),
          "bender_f:vx": this.random_velocity(),
          "bender_f:vy": this.random_velocity(),
          "bender_f:va": this.random_velocity() / 12,
        }));
      }
    ]]></set>
  </watch>
  <watch>
    <get event="keydown" view="$document">
      if (value.which === 37) {
        // left
        value.preventDefault();
        this.uses.ship.turn(-5);
      } else if (value.which === 39) {
        // right
        value.preventDefault();
        this.uses.ship.turn(5);
      }
    </get>
  </watch>

  <watch>
    <get use="$self" property="running"><![CDATA[
      if (value) {
        if (!window.hasOwnProperty("__running")) {
          this.run();
        }
      } else {
        window.webkitCancelAnimationFrame(window.__running);
        delete window.__running;
      }
    ]]></get>
  </watch>

  <script><![CDATA[

    this._prototype.random_velocity = function () {
      return flexo.random_int(50, 100) * (Math.random() < 0.5 ? -1 : 1);
    };

    this._prototype.run = function () {
      "use strict";
      var last_t = Date.now();
      var update = function (t) {
        flexo.notify(this, "@update", { dt: t - last_t });
        last_t = t;
        if (this.properties.running) {
          window.__running = window.webkitRequestAnimationFrame(update);
        }
      }.bind(this);
      window.__running = window.webkitRequestAnimationFrame(update);
    };

    this._prototype.split = function (asteroid) {
      console.log(asteroid);
      flexo.safe_remove(asteroid.use);
    };

  ]]> </script>


  <component id="ship" f:x="0" f:y="0" f:angle="0" f:r="15">
    <view>
      <svg:path d="M20,0L-20,15L-10,0L-20,-15Z" stroke="white" fill="black"
        stroke-width="4" stroke-linejoin="round" id="path"/>
    </view>
    <watch>
      <get property="angle"/>
      <get property="x"/>
      <get property="y"/>
      <set view="path" attr="transform">
        return "translate({x}, {y}) rotate({angle})".format(this.properties);
      </set>
    </watch>
    <script><![CDATA[
      "use strict";
      this._prototype.turn = function(increment) {
        this.properties.angle = (this.properties.angle + increment + 360) % 360;
      };
    ]]></script>
  </component>

  <component id="asteroid" f:x="0" f:y="0" f:angle="0" f:r="50" f:ramp="5"
    f:vx="0" f:vy="0" f:va="0" f:sectors="12">
    <view>
      <svg:path stroke="white" fill="black" stroke-width="4"
        stroke-linejoin="round" id="path"/>
    </view>
    <watch>
      <get property="r"/>
      <set view="path" attr="d"><![CDATA[
        var points = [];
        for (var i = 0; i < this.properties.sectors; ++i) {
          var th = i * (2 * Math.PI / this.properties.sectors);
          var r = value +
            flexo.random_int(-this.properties.ramp, this.properties.ramp);
          points.push({ x: r * Math.cos(th), y: r * Math.sin(th) });
        }
        return flexo.path_from_points(points, 0.25) + "z";
      ]]></set>
    </watch>
    <watch>
      <get property="angle"/>
      <get property="x"/>
      <get property="y"/>
      <set view="path" attr="transform">
        return "translate({x}, {y}) rotate({angle})".format(this.properties);
      </set>
    </watch>
    <watch>
      <get use="$parent" event="@update"/>
      <set use="$self" property="x">
        return (this.properties.x + (this.properties.vx * value.dt / 1000) +
          value.source.properties.hw + value.source.properties.w) %
          value.source.properties.w - value.source.properties.hw;
      </set>
      <set use="$self" property="y">
        return (this.properties.y + (this.properties.vy * value.dt / 1000) +
          value.source.properties.hh + value.source.properties.h) %
          value.source.properties.h - value.source.properties.hh;
      </set>
      <set use="$self" property="angle">
        return (this.properties.angle + (this.properties.va * value.dt / 1000) +
          360) % 360;
      </set>
    </watch>
    <watch>
      <get view="path" event="click">
        this.uses.$parent.split(this);
      </get>
    </watch>
  </component>

</app>
