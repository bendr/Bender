<app xmlns="http://bender.igel.co.jp"
  xmlns:f="http://bender.igel.co.jp/f"
  xmlns:b="http://bender.igel.co.jp/b"
  xmlns:svg="http://www.w3.org/2000/svg"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:xlink="http://www.w3.org/1999/xlink">

  <title>Transition Timing Function Designer</title>

  <include href="../lib/button.xml"/>
  <include href="../lib/check.xml"/>

  <component id="curve-point">
    <controller b:overflow="false">
      <script><![CDATA[

        $_.set_overflow = function(p)
        {
          this.overflow = p;
          if (!p) {
            var y = this.outlets.point.getAttribute("cy");
            if (y < 0 || y > 100) {
              y = Math.min(Math.max(0, y), 100);
              this.outlets.point.setAttribute("cy", y);
              this.outlets.line.setAttribute("y2", y);
              this.notify("@moved");
            }
          }
        };

        $_.set_xy = function(x, y)
        {
          this.outlets.point.setAttribute("cx", x);
          this.outlets.point.setAttribute("cy", y);
          this.outlets.line.setAttribute("x2", x);
          this.outlets.line.setAttribute("y2", y);
        };

        $_.get_xy = function(x, y)
        {
          return { x: this.outlets.point.getAttribute("cx"),
            y: this.outlets.point.getAttribute("cy") };
        };

        function find_svg(elem)
        {
          return elem.namespaceURI === flexo.SVG_NS &&
            elem.localName === "svg" ? elem : find_svg(elem.parentNode);
        }

        $_.init = function()
        {
          this.x1 = 0;
          this.y1 = 0;
        };

        $_.handleEvent = function(e)
        {
          if (e.type === "mousedown" || e.type === "touchstart") {
            e.preventDefault();
            this.outlets.point.setAttribute("fill", "#08f");
            this._svg = find_svg(this.outlets.point);
          } else if (this._svg) {
            if (e.type === "mousemove" || e.type === "touchmove") {
              e.preventDefault();
              var p = flexo.event_svg_point(e, this._svg);
              var x = Math.min(Math.max(0, p.x), 100);
              var y = this.overflow ?  100 - p.y :
                Math.min(Math.max(0, 100 - p.y), 100);
              this.set_xy(x, y);
              this.notify("@moved");
            } else if (e.type === "mouseup" || e.type === "touchend") {
              e.preventDefault();
              delete this._svg;
              this.outlets.point.setAttribute("fill", "#448");
            }
          }
        };

      ]]></script>
      <connect target="point"/>
      <connect target="line"/>
      <listen dom-event="mousedown" source="point"/>
      <listen dom-event="mousemove"/>
      <listen dom-event="mouseup"/>
      <listen dom-event="touchstart" source="point"/>
      <listen dom-event="touchmove"/>
      <listen dom-event="touchend"/>
    </controller>
    <view>
      <svg:line id="line" stroke="#08f" stroke-opacity="0.5"
        stroke-dasharray="1 1" x1="{x1}" y1="{y1}"/>
      <svg:circle id="point" r="2" fill="#448"/>
    </view>
  </component>

  <component id="curve-component">
    <controller f:margin="10">
      <script><![CDATA[

        $_.set_overflow = function(p)
        {
          this.outlets.p1.controllers[""].set_overflow(p);
          this.outlets.p2.controllers[""].set_overflow(p);
        };

        $_.set_curve = function(x1, y1, x2, y2)
        {
          var y = Math.min(100 - Math.max(y1, y2), 0) - this.margin;
          var h = Math.max(100 - Math.min(y1, y2), 100) - y +
            2 * this.margin;
          this.outlets.svg.setAttribute("viewBox",
            "-10, {0}, 120, {1}".fmt(y, h));
          this.outlets.p1.controllers[""].set_xy(x1, y1);
          this.outlets.p2.controllers[""].set_xy(x2, y2);
          this.outlets.curve.setAttribute("d", "M0,0C{0},{1} {2},{3} 100,100"
            .fmt(x1, y1, x2, y2));
          this.notify("@moved", { x1: x1, y1: y1, x2: x2, y2: y2 });
        };

        $_.handleEvent = function(e)
        {
          if (e.event_name === "@moved") {
            var p1 = this.outlets.p1.controllers[""].get_xy();
            var p2 = this.outlets.p2.controllers[""].get_xy();
            this.set_curve(p1.x, p1.y, p2.x, p2.y);
          }
        };

        $_.test = function()
        {
          this.outlets.anim1.beginElement && this.outlets.anim1.beginElement();
          var p1 = this.outlets.p1.controllers[""].get_xy();
          var p2 = this.outlets.p2.controllers[""].get_xy();
          this.outlets.anim2.setAttribute("keySplines", "{0} {1} {2} {3}"
            .fmt(p1.x / 100, p1.y / 100, p2.x / 100, p2.y / 100));
          this.outlets.anim2.beginElement();
        };

      ]]></script>
      <connect target="svg"/>
      <connect target="p1"/>
      <connect target="p2"/>
      <connect target="anim1"/>
      <connect target="anim2"/>
      <connect target="curve"/>
      <listen event="@moved" source="p1"/>
      <listen event="@moved" source="p2"/>
    </controller>
    <view>
      <svg:svg viewBox="-10, -10, 120, 120" width="480px" height="480px"
        id="svg">
        <svg:g transform="translate(0, 100) scale(1, -1)">
          <svg:rect width="100" height="100" fill="#ddd" rx="2" ry="2"/>
          <svg:circle r="1" cx="0" cy="0"/>
          <svg:circle r="1" cx="100" cy="100"/>
          <svg:path id="curve" fill="none" stroke="black"/>
          <component id="p1" ref="curve-point"/>
          <component id="p2" ref="curve-point" f:x1="100" f:y1="100"/>
          <svg:circle r="2" fill="none" stroke="#f80">
            <svg:animateMotion id="anim1" dur="3s" rotate="auto"
              begin="indefinite" fill="freeze">
              <svg:mpath xlink:href="#curve"/>
            </svg:animateMotion>
          </svg:circle>
          <svg:circle r="2" fill="none" stroke="#08f">
            <svg:animateTransform attributeName="transform" attributeType="XML"
              type="translate" id="anim2" dur="3s" values="0; 100"
              keyTimes="0; 1" calcMode="spline" begin="indefinite"
              fill="freeze">
              <svg:mpath xlink:href="#curve"/>
            </svg:animateTransform>
          </svg:circle>
        </svg:g>
      </svg:svg>
    </view>
  </component>

  <stylesheet>
    h1 { font-size: 150%; padding-top: 1em; font-weight: normal; }
    svg { float: left; }
    pre { clear: both; font-size: 120%; }
  </stylesheet>

  <view>
    <controller>
      <script><![CDATA[

        $_.set_ttf = function(x1, y1, x2, y2)
        {
          this.outlets.curve.controllers[""].set_curve(x1, y1, x2, y2);
        };

        $_.moved = function(e)
        {
          this.outlets.params.textContent = "cubic-bezier({0}, {1}, {2}, {3})"
            .fmt(e.x1 / 100, e.y1 / 100, e.x2 / 100, e.y2 / 100);
        };

        $_.random = function()
        {
          this.set_ttf(flexo.random_int(0, 100), flexo.random_int(0, 100),
            flexo.random_int(0, 100), flexo.random_int(0, 100));
        };

      ]]></script>
      <connect target="curve"/>
      <connect target="params"/>
      <listen event="@moved" source="curve" handler="moved"/>
      <listen event="@pushed" source="test-button">
        this.outlets.curve.controllers[""].test();
      </listen>
      <listen event="@pushed" source="set-ease">
        this.set_ttf(25, 10, 25, 100);
      </listen>
      <listen event="@pushed" source="set-linear">
        this.set_ttf(0, 0, 100, 100);
      </listen>
      <listen event="@pushed" source="set-ease-in">
        this.set_ttf(42, 0, 100, 100);
      </listen>
      <listen event="@pushed" source="set-ease-out">
        this.set_ttf(0, 0, 58, 100);
      </listen>
      <listen event="@pushed" source="set-ease-in-out">
        this.set_ttf(42, 0, 58, 100);
      </listen>
      <listen event="@pushed" source="set-random" handler="random"/>
      <listen event="@rendered" once="true" handler="random"/>
      <listen event="@checked" source="overflow-check">
        this.outlets.curve.controllers[""].set_overflow(event.checked);
      </listen>
    </controller>
    <component ref="curve-component" id="curve"/>
    <html:h1>Transition Timing Function Designer</html:h1>
    <html:p>
      This is a very simple tool to test values for the <html:a
        href="http://www.w3.org/TR/css3-transitions/">CSS3 Transitions
        Module</html:a> <html:code>transition-timing-function</html:code>
      property for CSS transitions. You can manipulate the values by dragging
      the two blue points on the canvas to the left, or selecting one of the
      default value below (<html:em>random</html:em> is not a value, but will
      generate random values.) Click on the <html:strong>Test</html:strong>
      button below to test these values; the orange circle will go along the
      current curve in 3 seconds, while the blue circle will move on a linear
      path.  <html:em>Currently really only works in Firefox; to be fixed
        soon.</html:em>
    </html:p>

    <html:p>
      <component ref="button" id="test-button">Test</component>
    </html:p>
    <html:p>
      <component ref="check" id="overflow-check">Allow overflowing <em>y</em>
        values</component>
    </html:p>
    <html:ul class="bender-naked">
      <html:li><component ref="button" id="set-ease">ease</component></html:li>
      <html:li><component ref="button"
          id="set-linear">linear</component></html:li>
      <html:li><component ref="button"
          id="set-ease-in">ease-in</component></html:li>
      <html:li><component ref="button"
          id="set-ease-out">ease-out</component></html:li>
      <html:li><component ref="button"
          id="set-ease-in-out">ease-in-out</component></html:li>
      <html:li><component ref="button"
          id="set-random">random</component></html:li>
    </html:ul>
    <html:pre>transition-timing-function: <html:span id="params"/></html:pre>
  </view>

</app>
